#use-added-syntax(jitx)
defpackage ethernet-io/DebugIF:
  import core
  import jitx
  import jitx/commands
  import jitx/parts

  import jsl
  import power-systems
  import debug/test-points
  import FTDI/components/FT2232HL

doc: \<DOC>
EEPROM Configuration for the FTDI interface

This module provides a EEPROM to store the configuration
parameters of the FTDI. This supports the VID, PID, etc.

@member VDD-3v3 Power rail supplying 3.3V - The FTDI needs
3.3V to support it's interface.
@member cfg FTDI specific microwire bus.
<DOC>
pcb-module FTDI-EEPROM :

  port VDD-3v3 : power

  port cfg : FTDI-microwire

  inst ROM : EEPROM/components/MC-93LC46/dev-93LC46C-I
  net (VDD-3v3, ROM.rail-VCC)

  insert-capacitor(
    ROM.C.VCC, ROM.C.VSS,
    capacitance = 0.1e-6
    precision = (10 %)
    type = "ceramic",
    temperature-coefficient_code = "X7R",
    short-trace? = true
  )

  net (ROM.C.CS, cfg.cs)
  net (ROM.C.CLK, cfg.clk)
  net (ROM.C.DI, cfg.data)

  make-test-points(cfg)

  ; Connect a DO -> uwire.data through a 2k resistor
  insert-resistor(
    ROM.C.DO, cfg.data,
    resistance = 2.0e3,
    precision = (1 %)
  )

  insert-pullup(ROM.C.CS, VDD-3v3)
  insert-pullup(ROM.C.CLK, VDD-3v3)
  insert-pullup(ROM.C.DO, VDD-3v3)
  ; ORG => 1
  ;   Causes the EEPROM to use a 16-bit word.
  insert-pullup(ROM.C.ORG, VDD-3v3)

doc: \<DOC>
Debug Interface providing JTAG and UART over USB

This circuit presents a USB upstream device port which
allows the device to be connected to a USB Host like a
laptop.

@param USB2-RS Routing structure for the USB2 differential pair.

@member VDD-3v3 Input voltage rail to support the USB Transceiver
@member VDD-USB Output voltage rail provided by the USB connector.
This is a 5V rail by USB specification.

@member dbg JTAG bus interface to program the MCU
@member acm Debug console for the MCU for debug logging.
@member target-reset Control signal for triggering RESET_n
from the USB interface.
<DOC>
public pcb-module circuit (USB2-RS:DifferentialRoutingStructure):

  port VDD-3v3 : power
  port VDD-USB : power

  port dbg : jtag
  port acm : uart-fc()
  port target-reset
  ; Set High to force MCU to bootloader mode on
  ;   reset.
  ; During normal operation this should be force low.
  port bootloader-enable
  ; Indicates that the debugger interface (FTDI) is active
  port dbg-active

  net GND (VDD-3v3.V-, VDD-USB.V-)

  ; FTDI USB to UART/JTAG
  inst ftdi : FTDI/components/FT2232HL/device(FT2232H-MPSSE, FT2232H-RS232, use-internal-1v8 = true)

  net (VDD-3v3, ftdi.VCCIO)

  ; Use ferrite filter on the VPLL and VPHY rails:

  val ferrite = passives/ferrite/BLM18KG(220)

  inst filt-VPLL : unbalanced-filter(ferrite)
  net (VDD-3v3, filt-VPLL.vin)
  net (filt-VPLL.vout, ftdi.VPLL)

  inst filt-VPHY : unbalanced-filter(ferrite)
  net (VDD-3v3, filt-VPHY.vin)
  net (filt-VPHY.vout, ftdi.VPHY)

  ; Test pin we will to ground through a jumper to give us
  ;  options should we need it.
  insert-resistor(ftdi.C.TEST, GND, resistance = 0.0, precision = (1 %))

  ; Expose the UART and the JTAG to the system
  ;  so that we can use these for a debug/test interfaces

  connect-require-ports(ftdi, [dbg, acm, bootloader-enable])

  require reset-ctl:gpio from ftdi
  ; TODO - make this an open-drain with a MOSFET.
  net (target-reset, reset-ctl.gpio)

  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ; FTDI Crystal
  ; 12MHz +/- 30ppm

  val xtal-type = passives/crystal/FA-238(12)

  ; @TODO - check that the crystal meets the precision
  ;   requirement of 30ppm => 0.003%

  val resonator-type = create-crystal-resonator(
    xtal-type = xtal-type,
    C-load = typ(property(xtal-type.C-load))
    ; FTDI doesn't list an input capacitance for the oscillator
    ;  pins so I'm using this as an estimate for a QFP style package.
    C-stray = typ(5.0e-12),
    V-rating = 2.0 * 3.3 ; AVDDH
  )

  inst resonator : resonator-type
  net (resonator.COMMON, GND)

  net (resonator.p[1], ftdi.C.OSCO)
  ; Add a series resistor for dampening if needed.
  insert-resistor(
    resonator.p[2], ftdi.C.OSCI,
    resistance = 0.0,
    precision = (1 %)
  )


  net DBG-ACTIVE (dbg-active, ftdi.C.PWREN_n)

  make-test-points([DBG-ACTIVE, target-reset, bootloader-enable])

  ;; FTDI EEPROM
  inst eeprom : FTDI-EEPROM

  net (eeprom.VDD-3v3, VDD-3v3)
  net (eeprom.cfg, ftdi.cfg)


  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ; USB C Connector
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

  inst USBC : connectors/components/USB/USBTypeC/device

  ; Construct Pour Keepouts on applicable layers
  val pt-pd-map = port-to-pads(USBC.J)
  val pds = for kvp in pt-pd-map seq-cat:
    value(kvp)
  val b = bounds(pds, layer-spec = SolderMask(Top), expand-by = 0.25)
  val KO = KeepoutOverlay(to-Rectangle(b))
  make-keepout-overlay(
    KO, USBC.J,
    ; TODO - I want to use the stackup to construct the set
    ;  of `Not(LayerIndex(1))` instead of explicitly calling
    ;  out these 3 layers.
    layer-set = [LayerIndex(0), LayerIndex(2), LayerIndex(3)]
    name = "USBC-Keepout"
    )

  inst zener : diodes/MMSZ4-zener/device(5100)

  apply-power(zener, USBC.conn.vbus)

  ; Two separate pull down resistors per the USB-C
  ;  spec Section 4.5.1.2.1
  ; https://www.usb.org/sites/default/files/USB%20Type-C%20Spec%20R2.0%20-%20August%202019.pdf
  val pu-R = create-resistor(resistance = 5.1e3, precision = (1 %))
  for i in indices(USBC.conn.bus.cc) do:
    insert-pulldown(USBC.conn.bus.cc[i], GND, elem-type = pu-R)

  ; This is the USB power connection that we will be used
  ;  for debug power
  net VUSB (VDD-USB, USBC.conn.vbus)

  make-test-points(VUSB.V+)

  inst esd-prot : diodes/ESD224DQAR/device
  net (esd-prot.GND[1], esd-prot.GND[2], GND)

  val cst = USB-Constraint(proto = USB2, route-struct = USB2-RS)
  within [src, dst] = constrain-topology(ftdi.USB.data => USBC.conn.bus.data, cst):
    require esd-pair:dual-pair from esd-prot
    topo-pair(src => esd-pair.A => esd-pair.B => dst)

  val C-query = CapacitorQuery(
    type = "ceramic",
    temperature-coefficient_code = "X7R",
    precision = (10 %)
  )

  ; Manage the USB Connector shield
  val R-sh = Elem $ create-resistor(resistance = 0.0, precision = (1 %))
  val C-sh = Elem $ create-capacitor(C-query, capacitance = 4.7e-9, rated-voltage = AtLeast(50.0))
  inst shield-term : create-circuit(R-sh | C-sh, name? = One $ "USBC-Shield-Term")

  net (USBC.conn.shield, shield-term.p[1])
  net (shield-term.p[2], GND)


  ; Self-Powered - Reset for FTDI on Cable Connect
  ; See section 2.4.4 Figure 2.6 in the hardware design guide.
  ;
  val R-t = Elem{_, name = `Rt} $ create-resistor(resistance = 4.7e3, precision = (1 %))
  val R-b = Elem{_, name = `Rb} $ create-resistor(resistance = 10.0e3, precision = (1 %))
  val Vbus-V = typ $ property(zener.zener-V)
  val C-b = Elem{_, name = `cb} $ create-capacitor(
    C-query,
    capacitance = 1.0e-9, rated-voltage = AtLeast( Vbus-V * 2.0)
    )

  inst reset-div : create-circuit(R-t + Tap(`reset-bias, R-b | C-b))
  apply-power(reset-div, USBC.conn.vbus)
  net (reset-div.reset-bias, ftdi.C.RESET_n)




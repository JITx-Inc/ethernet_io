#use-added-syntax(jitx)
defpackage ethernet-io/helpers :
  import core
  import jitx
  import jitx/commands

  import jsl

  import jlc-pcb/rules/multi_1oz

doc: \<DOC>
PCB Substrate

This object defines features of the PCB board and provides
a mechanism for accessing definitions for vias, routing structures,
etc.

<DOC>
public val substrate = jlc-pcb/stackups/JLC04161H-1080/JLC04161H-1080()

; ============
; setup-design
; ============
doc: \<DOC>
Setup the Board Definition

@param name Names the current design. This will define the name shown
in the drop down of the schematic and board visualizer.
@param outline Shape of the board.
@param signal-shrink Offset for the signal boundary from the board outline shape.
This allows us to restrict signals to a smaller area inside the outline away from
the board edge. This value is in mm and is expected to be positive. If no
value is provided then the signal boundary shape is the same as the board outline.
<DOC>
public defn setup-board (name:String, outline:Shape -- signal-shrink:Double = ?):
  set-current-design(name)
  set-board(make-board-def(substrate, outline, signal-shrink = signal-shrink))
  set-rules(jlcpcb-rules-multi-1oz)
  ; TODO - We need to replace this with the new query api via the
  ;  `set-global-query-defaults!` function.
  val vendors = jsl/design/settings/APPROVED-DISTRIBUTOR-LIST
  set-bom-vendors(vendors)
  ; TODO - Use `set-global-query-defaults!` value of `quantity-needed`
  set-bom-design-quantity(10)

  val bom-columns = [
    BOMColumn(BOMFieldStatus, "Status", 10.0)
    BOMColumn(BOMFieldDescription, "Description", 10.0)
    BOMColumn(BOMFieldInsts, "References", 10.0)
    BOMColumn(BOMFieldDatasheet, "Datasheet", 10.0)
    BOMColumn(BOMFieldManufacturer, "Manufacturer", 10.0)
    BOMColumn(BOMFieldMPN, "Part Number", 10.0)
    BOMColumn(BOMFieldQuantity, "Quantity", 8.0)
    BOMColumn(BOMFieldPrice, "Price", 8.0)
    BOMColumn(BOMFieldPreferred, "Preferred", 8.0)
  ]
  set-bom-columns(bom-columns)

  set-paper(ANSI-B)
  set-export-backend(`kicad)

; =====================
; Run the design checks
; =====================
public defn run-check-on-design (circuit:Instantiable) :
  set-main-module(circuit)
  run-checks("checks.txt")

; ====================
; Actual Export design
; ====================
public defn export-to-cad () :
  export-cad([
    "vendor_part_numbers.lcsc" => "LCSC"
  ])

; ====================
; Export design to CAD
; ====================
public defn export-design () :
  set-export-board?(true)
  export-to-cad()

; ===================================
; Update CAD, keeping layout progress
; ===================================
public defn update-design () :
  set-export-board?(false)
  export-to-cad()


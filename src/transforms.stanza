#use-added-syntax(jitx)
defpackage ethernet-io/transforms:
  import core
  import jitx
  import jitx/commands

  import jsl

defn get-category! (component:Instance|Instantiable) -> String:
  val c? = property?(component.category)
  match(c?):
    (_:None):
      val name = match(component):
        (cInst:Instance): ref(cInst)
        (cDefn:Instantiable): to-string(cDefn)
      throw $ ValueError("No Category Property Found on '%_'" % [])
    (given:One<String>): value(given)

defn is-category? (component:Instance|Instantiable, cat-type:String) -> True|False :
  inside pcb-module:
    val c? = property?(component.category)
    match(c?):
      (_:None): false
      (given:One<String>):
        value(given) == cat-type

doc: \<DOC>
Replace Schematic Symbols for Element Components

2-pin Element components like resistors, capacitors, etc are often specified
via the `jitx/parts` API. With this API, default symbols for the resistors and
capacitors are generated but they can't be configured.

This function can replace all element components by category with a
new schematic symbol that is parameterizable.

@param module Design module that we want to replace symbols on. It can be the
top level or a sub-module. This transformation occurs recursively.
@param cat-type Category type for matching components that will be transformed.
This string is compared to the `property(component.category)` value to find matches.
@param symb-type Schematic Symbol or Symbol Generator that will generate the new
schematic symbol for this component.
<DOC>
public defn replace-element-symbols (module:Instantiable, cat-type:String, symb-type:SymbolDefn|SchematicSymbol) -> Instantiable :
  val symb = match(symb-type):
    (s:SchematicSymbol): s
    (sd:SymbolDefn): create-symbol(sd)
  val [q1, q2] = get-element-ports(symb)

  within component = modify-components(module):
    inside pcb-module:
      label<Instantiable|False> return:
        if is-category?(component, cat-type):
          return $ within transform-component(component) :
            inside pcb-component :
              val [p1, p2] = get-element-ports(self)
              override symbol = symb(p1 => q1, p2 => q2)


defn gen-chip-pkg (component:Instantiable) -> LandPattern|Package :
  inside pcb-module:
    val cat-type = get-category!(component)
    val case = property(component.case)
    val ko = IntraPadKeepOut()
    switch(cat-type):
      "resistor": get-resistor-pkg(case, keep-out = ko)
      "capacitor": get-capacitor-pkg(case, keep-out = ko)
      else: get-chip-pkg(case)

doc: \<DOC>
Replace 2-pin circuit element landpatterns with JSL alternatives.

This function is a module transformation. It will find
resistors and capacitors and replace their default landpattern with a
customized JSL variant.

This operation does not modify the pre-existing module - it creates a new module
with transformed characteristics

@param module The module to transform.
@param cat-type Category, either `resistor` or `capacitor`
@param gen-pkg Function to generate the replacment landpattern depending on category.
<DOC>
public defn replace-element-landpatterns (module:Instantiable, cat-type:String, gen-pkg:(Instantiable -> Package|LandPattern)) -> Instantiable :
  within component = modify-components(module):
    inside pcb-module:
      label<Instantiable|False> return:
        if is-category?(component, cat-type):
          return $ within transform-component(component) :
            inside pcb-component :
              val pkg = gen-pkg(component)
              val lp = match(pkg):
                (L:LandPattern): L
                (P:Package): create-landpattern(P)
              val q1 = get-pad-by-name!(lp, "p[1]")
              val q2 = get-pad-by-name!(lp, "p[2]")
              val [p1, p2] = get-element-ports(self)
              override landpattern = lp(p1 => q1, p2 => q2)


doc: \<DOC>
Top-Level Module Transformation for the ethernet-io design

This function will transform the top-level design by applying all
the replacement symbols for resistors and capacitors. This is
where we customize the look and feel of the passive components.
<DOC>
public defn replace-symbols (module:Instantiable) -> Instantiable :
  val override = ResistorSymbolParams( style = OpenRectangle, amplitude = 0.2)
  val R = ResistorSymbol(params = One $ override)
  module $>
    replace-element-symbols{_, "resistor", R} $>
    replace-element-symbols{_, "capacitor", CapacitorSymbol()}


doc: \<DOC>
Top Level Module Transformation

This will replace landpatterns with JSL customized landpatterns.
<DOC>
public defn replace-landpatterns ( module:Instantiable) -> Instantiable :
  module $>
    replace-element-landpatterns{_, "resistor", gen-chip-pkg} $>
    replace-element-landpatterns{_, "capacitor", gen-chip-pkg}

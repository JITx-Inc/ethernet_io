; Generated by JITX 3.10.0
#use-added-syntax(jitx)
defpackage ethernet-io/main :
  import core
  import jitx
  import jitx/commands
  import jitx/parts

  import ethernet-io/helpers
  import ethernet-io/power
  import ethernet-io/transforms

  import jlc-pcb/stackups/vias

  import jsl
  import power-systems
  import debug/test-points



; Define the shape/size of the board
val board-shape = RoundedRectangle(100.0, 70.0, 0.5)


; Set the Global Query Defaults
set-global-query-defaults!(min-stock = 1, mounting = "smd", case = ["0402", "0603"])

defn create-reset-circuit () :
  inside pcb-module:
    val reset-sw = Elem $ switches/tactile-sw/device
    val pullup = Elem $ create-resistor(resistance = 10.0e3, precision = (1 %))
    val diode = Elem $ diodes/SSA33L/component
    val delay-cap = Elem $ create-capacitor(
      capacitance = 10.0e-6,
      precision = (10 %),
      rated-voltage = AtLeast(2.0 * 3.3),
      type = "ceramic",
      temperature-coefficient_code = "X7R"
      )
    val reset-circ-type = create-circuit( (diode | pullup) + Tap(`RESET_N, reset-sw | delay-cap))
    inst reset-circ : reset-circ-type
    reset-circ

public pcb-module comms-core :
  port rail-3v3 : power

  inst PWR : PowerInConn
  inst pwr-mng : power-mng

  net (PWR.V24, pwr-mng.VIN)

  inst netsw : ethernet-io/network-switch/circuit(tented-filled-std-via)

  net PWR-3v3 (pwr-mng.VDD-3v3, netsw.VDD-3v3, rail-3v3)
  net PWR-1v2 (pwr-mng.VDD-1v2, netsw.VDD-1v2)

  public inst controller : ethernet-io/MCU/circuit
  net (pwr-mng.VDD-3v3, controller.rail-3v3)

  val se-50 = jlc-pcb/stackups/JLC04161H-7628/se-50(neckdown = NeckDown(clearance = 0.1))
  val rmii-cst = RMII-Constraint(se-50)
  constrain-topology(controller.mii => netsw.mii, rmii-cst)

  net MIIM (controller.mdio, netsw.management)

  net SW_IRQ_N (netsw.irq-n, controller.switch-irq-n)
  net SW_PME_N (netsw.power-evt-n, controller.switch-pme-n)

  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ; Reset switch

  val reset-circ = create-reset-circuit()
  apply-power(reset-circ, pwr-mng.VDD-3v3)

  net RESET_n (controller.reset-n, reset-circ.RESET_N, netsw.netsw.C.RESET_N)
  make-test-points(RESET_n)

  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ; Debug Interface

  inst debug-if : ethernet-io/DebugIF/circuit(jlc-pcb/stackups/JLC04161H-7628/diff-90())
  net (debug-if.VDD-3v3, pwr-mng.VDD-3v3)
  net (debug-if.VDD-USB, pwr-mng.VUSB-in)

  net (debug-if.acm, controller.acm)
  net (debug-if.dbg, controller.dbg)

  net (debug-if.target-reset, RESET_n)
  net BOOT_EN (debug-if.bootloader-enable, controller.boot-ctl)
  net DBG_ACTIVE (debug-if.dbg-active, controller.dbg-active)


; Module to run as a design
pcb-module top-level :

  inst core : comms-core

  net GND (core.rail-3v3.V-)

  ; Sensors and Control Interfaces Instantiate here.


  ; Board Level Physical Features
  geom(GND):
    copper-pour(LayerIndex(0), isolate = 0.125, rank = 1) = board-shape
    copper-pour(LayerIndex(1), isolate = 0.125, rank = 1) = board-shape


setup-board("ethernet-io", board-shape, signal-shrink = 0.5)
val std-design = top-level $> replace-symbols $> replace-landpatterns
set-main-module(std-design)

; View the results
view-design-explorer()
; view-bom(BOM-STD)
view-schematic()
view-board()


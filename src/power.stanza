#use-added-syntax(jitx)
defpackage ethernet-io/power:
  import core
  import jitx
  import jitx/commands
  import jitx/parts/query-api

  import ethernet-io/helpers

  import jsl
  import power-systems
  import debug/test-points


doc: \<DOC>
Construct the power sub-system of the design.

@member VIN System level input power - Current Design is targeting 24V
@member VUSB-in Voltage rail from the debug USB connector. Primarily
this is intended to be used for debugging and not used in application.
@member VDD-3v3 Low voltage 3.3V rail
@member VDD-1v2 Low voltage 1.2V rail
<DOC>
public pcb-module power-mng:
  port VIN : power

  port VUSB-in : power

  port VDD-5v : power
  port VDD-3v3 : power
  port VDD-1v2 : power

  port power-good

  net GND (VIN.V-, VUSB-in.V-, VDD-1v2.V-, VDD-3v3.V-, VDD-5v.V-)

  ; DC / DC 24V -> 5V
  ;  We are outputing slightly above 5.0V so that
  ;  when self-powering with USB connected, the internal 24V->5V DC/DC
  ;  wins and powers the board instead of USB.
  val buck-5V-cst = BuckConstraints(
    v-in = min-max(20.0, 28.0),
    v-out = 5.5 +/- (2 %)
    v-in-ripple-max = 0.050
    v-out-ripple-max = 0.030
    i-out = 1.0 +/- (20 %)
    freq = 1.2e6
    K = (40 %)
  )

  inst DCDC-5V : TI-vreg/components/TPS6293x/circuit(
    TI-vreg/components/TPS6293x/TPS62932DRL,
    buck-5V-cst,
    freq = 1.2e6,
    SS-period = 10.0e-3 +/- 2.0e-3,
    UVLO = [15.0, 12.0]
  )

  net (VIN, DCDC-5V.conv.VIN)
  net VDD-5V-LOC (DCDC-5V.conv.VOUT.V+)
  symbol(VDD-5V-LOC) = PWR-SYMB

  ; Diode OR
  ;   DC/DC 5V -----┐
  ;   VUSB-in  -----|----- 5V

  val diode-type = diodes/SSA33L/component
  inst USB-OR : diode-OR(diode-type, 2)
  net (USB-OR.vin[0], VUSB-in)
  net (USB-OR.vin[1], DCDC-5V.conv.VOUT)

  net VDD-5V (USB-OR.vout.V+)
  symbol(VDD-5V) = PWR-SYMB
  make-test-points(VDD-5V)

  net (VDD-5v, USB-OR.vout)

  val range-5V = min-max(4.9, max-value(v-out(buck-5V-cst)))

  val C-query = CapacitorQuery(
    type = "ceramic",
    temperature-coefficient_code = "X7R"
    case = ["0603", "0805", "1206"]
    precision = precision(E12())
  )

  ; DC/DC 5V -> 3.3V
  val cxt-3v3 = BuckConstraints(
    v-in = range-5V,
    v-out = 3.3 +/- (3 %)
    v-in-ripple-max = 0.050
    v-out-ripple-max = 0.030
    i-out = 1.0 +/- (20 %)
    freq = 1.2e6
    K = (40 %)
  )

  inst DCDC-3v3 : TI-vreg/components/TPS6208x/circuit(
    TI-vreg/components/TPS6208x/TPS62082DSG
    cxt-3v3
    snooze-mode = false
    snooze-conn? = create-resistor(
        resistance = 0.0,
        precision = (1 %)
      )
    C-query? = C-query
    )

  ; inst DCDC-3v3 : DCDC-5V-to-3v3
  net (USB-OR.vout, DCDC-3v3.conv.VIN)
  net (DCDC-3v3.conv.VOUT, VDD-3v3)

  net VDD-3v3-n (VDD-3v3.V+)
  symbol(VDD-3v3-n) = PWR-SYMB
  make-test-points(VDD-3v3-n)

  ; The 3.3V version does not require a
  ;   feedback divider - but we include the
  ;   circuit anyway for sourcing options.
  instance-status(DCDC-3v3.fb-div):
    bom-status = MarkedDNP

  ; DC/DC 5V -> 1.2V

  val cxt-1v2 = BuckConstraints(
    v-in = range-5V,
    v-out = 1.2 +/- (3 %)
    v-in-ripple-max = 0.050
    v-out-ripple-max = 0.030
    i-out = 1.0 +/- (20 %)
    freq = 1.2e6
    K = (40 %)
  )

  inst DCDC-1v2 : TI-vreg/components/TPS6208x/circuit(
    TI-vreg/components/TPS6208x/TPS62080DSG
    cxt-1v2
    snooze-mode = false
    snooze-conn? = create-resistor(
        resistance = 0.0,
        precision = (1 %)
      )
    C-query? = C-query
    )


  ; inst DCDC-1v2 : DCDC-5V-to-1v2
  net (USB-OR.vout, DCDC-1v2.conv.VIN)
  net (DCDC-1v2.conv.VOUT, VDD-1v2)

  net VDD-1v2-n (VDD-1v2.V+)
  symbol(VDD-1v2-n) = PWR-SYMB
  make-test-points(VDD-1v2-n)

  ; Power Sequencing on Startup
  ;  Per the KSZ9563's datasheet, Section 648, Note 1
  ;  Because we share 3.3V for the AVDDH and the VDDIO,
  ;  we want to bring up the core 1.2V first and then
  ;  the 3.3V rail.
  ;

  ; Enable the 1.2V on the VIN
  net (DCDC-1v2.enable, USB-OR.vout.V+)

  ; Power Good for 1.2V is referenced from 5V
  ;  to be sure that we can drive the voltage
  ;  threshold for the other DC/DC's enable.
  insert-pullup(DCDC-1v2.power-good, USB-OR.vout)
  net (DCDC-1v2.power-good, DCDC-3v3.enable)

doc: \<DOC>
Input Power Connection Circuit

This circuit sets up the terminal block for the
24V input power. This creates the appropriate
keepouts for the 24V input.

@member V24 24V Input Rail
<DOC>
public pcb-module PowerInConn :
  port V24 : power

  ; Use a 4 pole so that we can daisy chain power from one device to the next
  ; ASSUMPTION: supplementary circuit prediction upstream of the device.
  public inst TB : connectors/components/LSF-SMT/component(num-poles = 4)

  net V24-n (TB.p[1], TB.p[2], V24.V+)
  symbol(V24-n) = PWR-SYMB

  val pds = get-pads-from-ports([TB.p[1], TB.p[2]])
  val b = bounds(pds, layer-spec = SolderMask(Top), expand-by = 0.5)

  val KO = KeepoutOverlay(to-Rectangle(b))
  make-keepout-overlay(
    KO, TB,
    layer-set = conductors-by-index(stackup(substrate))
    name = "24V-Keepout"
    )

  net GND (TB.p[3], TB.p[4], V24.V-)
  symbol(GND) = GND-SYMB
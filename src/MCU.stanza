#use-added-syntax(jitx)
defpackage ethernet-io/MCU:
  import core
  import jitx
  import jitx/commands
  import jitx/parts/query-api

  import jsl/protocols/ethernet/MII/RMII
  import jsl/protocols/ethernet/MII/MIIM

  import jsl/si
  import jsl/pin-assignment
  import jsl/bundles

  import jsl/circuits/CrystalResonator
  import jsl/circuits/ConfigStrap
  import jsl/circuits/Pullups
  import power-systems
  import debug/test-points



val rmii-bus = rmii(add-rx-error = false)


public pcb-module circuit:

  port rail-3v3 : power

  port reset-n

  port mii : rmii-bus
  port mdio : miim

  port switch-irq-n
  port switch-pme-n

  port dbg : jtag
  port acm : uart-fc()
  port boot-ctl
  port dbg-active

  public inst mcu : stmicro/components/STM32H723VGT6/module

  net (rail-3v3, mcu.rail-VDD)
  net GND (rail-3v3.V-)

  connect-require-ports(mcu, [dbg, acm, reset-n], def-bundle = reset)
  connect-require-ports(mcu, [switch-pme-n, switch-irq-n, dbg-active])

  ; setup the RMII interface - we want
  ;  to place resistors on the transmit pins
  ;  from the MCU and short-trace them close
  ;  to the MCU.

  require mii-bus:rmii-bus from mcu

  topo-bus([mii-bus.crs-dv, mii-bus.ref-clk, mii-bus.rxd] => [mii.crs-dv, mii.ref-clk, mii.rxd])

  ; Create Series resistor
  val series-R-type = create-resistor(resistance = 51.0, precision = (1 %), case = ["0603"])

  val tx-bus = [mii-bus.txd, mii-bus.tx-en]
  val tx-out = [mii.txd, mii.tx-en]
  topo-bus(ShortTrace(tx-bus => series-R-type) => tx-out)

  ; Set signal ends so we get the right routing
  ;    structure all the way to the pin.
  set-signal-end(mii, mii-bus)

  require mng-bus : miim from mcu

  ; Add Pullup resistors
  net (mng-bus.mdc, mdio.mdc)
  net (mng-bus.mdio, mdio.mdio)

  make-test-points(mng-bus)

  val pullup-miim = create-resistor(resistance = 4.7e3, precision = (1 %))

  inst pullup-mdio : pullup-miim
  net (pullup-mdio.p[1], mng-bus.mdio)
  net (pullup-mdio.p[2], rail-3v3.V+)

  inst pullup-mdc : pullup-miim
  net (pullup-mdc.p[1], mng-bus.mdc)
  net (pullup-mdc.p[2], rail-3v3.V+)

  ; Depopulate the Pullup on MDC because it
  ;  is not needed according to the KSZ9563 datasheet
  ;  This is a hedge.
  instance-status(pullup-mdc):
    bom-status = NotInBOM

  ; Analog Interface

  val ferrite = passives/ferrite/BLM18KG(220)
  inst filt-3v3 : unbalanced-filter(ferrite)
  net (rail-3v3, filt-3v3.vin)
  net (filt-3v3.vout, mcu.rail-VDDA)

  ; STM suggests connecting VREF to VDDA even if not used.
  net (filt-3v3.vout, mcu.VREF)

  ;; ---- Crystal ----
  ;  12MHz +/- 50ppm

  val xtal-type = passives/crystal/FA-238(12)

  val resonator-type = create-crystal-resonator(
    xtal-type = xtal-type,
    C-load = typ(property(xtal-type.C-load))
    ; From Datasheet Section 6.36.16, Table 51, Page 149
    C-stray = typ(5.0e-12),
    V-rating = 2.0 * 3.3 ; AVDDH
  )

  inst resonator : resonator-type
  net (resonator.COMMON, GND)

  require OSC:stmicro/bundles/high-freq-oscillator from mcu

  net (resonator.p[1], OSC.out)
  ; Add a series resistor for dampening if needed.
  insert-resistor(
    resonator.p[2], OSC.in,
    resistance = 0.0,
    precision = (1 %)
  )

  ; BOOT0 - causes the microcontroller to enter bootloader
  ;   mode on reset

  ; Add a jumnper so that we can control this from USB but we can also
  ;  disable it by removing the resistor if we are having trouble.
  insert-resistor(boot-ctl, mcu.BOOT, resistance = 0.0, precision = (1 %))

  ; This switch allows us to manually force the bootloader sequence
  ; on the microcontroller in the case we are not using the microcontroller.
  inst boot-sw : switches/tactile-sw/device
  net (boot-sw.p[1], rail-3v3.V+)
  net (boot-sw.p[2], mcu.BOOT)


  ; DIP Switches for configuration

  val num-sw = 4
  inst DIP : switches/DIP-sw/device(num-sw)

  net dip-cfg:pin[num-sw]
  for i in 1 through num-sw do:
    net (dip-cfg[i - 1], DIP.p[i])
    net (GND, DIP.p[i + num-sw])

    insert-pullup(dip-cfg[i - 1], rail-3v3)

  require dip-gpio:gpio[num-sw] from mcu
  for i in 0 to num-sw do:
    net (dip-cfg[i], dip-gpio[i].gpio)


  ; Board Revision Config
  ;  These pullups are for indicating which board version
  ; the hardware represents to the microcontroller at runtime.
  var num-rev-bits = 3
  val pullup-R-t = create-resistor(resistance = 4.7e3, precision = (1 %))
  inst configs : ConfigStrap(
    num-elems = num-rev-bits,
    comp = pullup-R-t,
    pack? = One(LongitudinalPacking(margin = 0.2))
  )
  net (configs.hi, rail-3v3.V+)
  net (configs.lo, GND)

  require straps:config-strap-bus(num-rev-bits) from configs
  require rev-gpio:gpio[num-rev-bits] from mcu
  for i in 0 to num-rev-bits do:

    net (straps.config[i], rev-gpio[i].gpio)
